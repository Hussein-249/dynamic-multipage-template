{
    "title": "Project Documentation",
    "date-created": "2024-5-20",
    "last-updated": "2024-5-23",
    "sections": [
        {
            "title": "Overview",
            "text": "This application aims to both be a proof-of-concept and a professional solution for users seeking to host a blog or news platform. This documentation aims to cater towards users with technical backgrounds and users without technical backgrounds who want to use this app while understanding how to customize it and use it effectively.",
            "text1": "Firstly, a brief setup guide details installation and the environment details for this application to run, followed by a user guide for creating new articles/posts and maintaining the app via in-built analytics and logging. Then the software design and development process is explained, followed by a scalability anaylsis for improving this application's performance.",
            "text2": "If you are a user without a technical background, feel free to skip the technical sections and read the User Guide section directly. If you are aiming to understand how a specific function works, please take a look at the Module Documentation."
        },
        {
            "title": "Installation and Environment",
            "text": "> Clone the Git repository at https://github.com/Hussein-249/dynamic-multipage-template",
            "text1": "> Or via the command line:",
            "code1": "git clone https://github.com/Hussein-249/dynamic-multipage-template",
            "text2": "> Install the packages included in package.json using",
            "code2": "npm install",
            "text3": "> Run the application using either",
            "code3": "npm start",
            "text4": "> or",
            "code4": "node server.js"
        },
        {
            "title": "User / Admin Guide",
            "text": "Coming Soon"
        },
        {
            "title": "Software Design",
            "text": "This application is not object-oriented, and aims to loosely follow a MVC (Model-View-Control) pattern, as seen in the database module. An object-oriented approach did not suit the aim of this project, as the primary data type being handled is an article of text, which is already abstracted via the MVC layers.",
            "text1": "The choice of technologies and libraries used to deliver this solution must be addressed. The project's runtime is Node, and all its features are achieved through Node modules. This due to the project's aim to be both versatile for developers and easy for non-technical users to deploy and use, hassle-free. Although most of the code is server-side, sharing the same language as the client-side JavaScript means a smoother development experience, as opposed to a Python framework such as Flask.",
            "text2": "The second major choice was selecting MongoDB as the database. MongoDB's objects allow a seamless integration of article data into the EJS templates. More importantly, MongoDB's collections do not have fixed schemas unlike tables in SQL databases, allowing article to have a variable number of paragraphs. Articles can be any length of paragraphs, until the text reaches the MongoDB size limit (16MB)!"
        },
        {
            "title": "Development Process",
            "text": "The following paragraphs detail the main development challenges encountered during development, and the methods implemented to overcome them.",
            "text1": "The first issue encountered during the design was designing a method to store and retrieve images for articles. MongoDB can store images, and the 16MB document size limit is sufficient for storing images. For simplicity, this approach was not taken, and the images are stored locally."
        },
        {
            "title": "Module Documentation",
            "text": "This project has its code divided into modules for easy development, maintenance, and modularity. In this section, each module's main functions will be documented."
        },
        
        {
            "title": "Scalability Analysis",
            "text": "This project aims to be scalable through EJS templates. All pages viewed are dynamically generated via server-side rendering, which is more optimal for SEO as opposed to client-side rendering. For example, all articles are generated by retrieving text from the database and then rendering it via the same article.ejs template. The disadvantage is, naturally, that there is little customization. However, as this project aims to be mobile-friendly, complex article layouts would be difficult to implement, which is contradictory to this project's aim.",
            "text1": "In its current iteration, the express server does not handle high volumes of traffic well, which may result in failed connections under high loads."
        }, 
        {
            "title": "Copyright (Media sources)",
            "text": "All placeholder / example images for this app are in the public domain, sourced from Wikimedia Commons."
        }    
    ]
}